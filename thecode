import pandas as pd
import random
import matplotlib.pyplot as plt

class SecretCodeBreaker:
    def _init_(self):
        self.code = []    
        self.attempts_left = 3  
        self.player_name = ""  
        self.correct_digits_progress = [] 

    def generate_code(self):
        self.code = [random.randint(1, 9) for _ in range(4)]

    @staticmethod
    def validate_guess(guess):
        return len(guess) == 4 and all(digit.isdigit() and 1 <= int(digit) <= 9 for digit in guess)

    def get_feedback(self, guess):
        correct_position = sum(1 for i in range(4) if self.code[i] == guess[i])
        correct_digit = sum(min(self.code.count(digit), guess.count(digit)) for digit in set(guess))
        return correct_position, correct_digit - correct_position

    @staticmethod
    def read_high_scores():
        try:
            df = pd.read_csv('high_scores.csv')
            print("High scores loaded successfully!")
            return df
        except FileNotFoundError:
            print("No previous high scores found. Starting a new high score list.")
            return pd.DataFrame(columns=["Player", "Remaining Guesses"])
        except Exception as e:
            print(f"Error reading high scores: {e}")
            return pd.DataFrame(columns=["Player", "Remaining Guesses"])

    @staticmethod
    def save_high_scores(df):
        try:
            df.to_csv('high_scores.csv', index=False)
            print("High scores saved successfully!")
        except Exception as e:
            print(f"Error saving high scores: {e}")

    def plot_progress(self):
        if not self.correct_digits_progress:
            print("No progress data to plot.")
            return
        plt.plot(range(1, len(self.correct_digits_progress) + 1), self.correct_digits_progress, marker='o', linestyle='-', color='b')
        plt.title('Progress of Correct Digits in Each Attempt')
        plt.xlabel('Attempt Number')
        plt.ylabel('Correct Digits')
        plt.grid(True)
        plt.show()

    def play_game(self):
        self.generate_code()
        self.player_name = input("Enter your name: ").strip()

        print(f"Hello {self.player_name}! Let's start the game.")

        while self.attempts_left > 0:
            print(f"\nYou have {self.attempts_left} attempts left.")
            guess = input("Enter your guess (4 digits between 1 and 9): ").strip()

            if not self.validate_guess(guess):
                print("Invalid guess. Please enter 4 digits between 1 and 9.")
                continue

            guess = [int(digit) for digit in guess]
            correct_position, correct_digit = self.get_feedback(guess)
            self.correct_digits_progress.append(correct_position)

            print(f"Feedback: {correct_position} correct position(s), {correct_digit} correct digit(s) in wrong position(s)")

            if correct_position == 4:
                print("Congratulations! You've cracked the code!")
                break

            self.attempts_left -= 1

        self.plot_progress()

        if correct_position == 4:
            high_scores = self.read_high_scores()
            new_entry = pd.DataFrame([{"Player": self.player_name, "Remaining Guesses": self.attempts_left}])
            high_scores = pd.concat([high_scores, new_entry], ignore_index=True)
            self.save_high_scores(high_scores)
            print(f"Your high score has been saved with {self.attempts_left} remaining guesses.")
        else:
            print(f"Sorry! You've run out of attempts. The correct code was: {''.join(map(str, self.code))}")

# Main program loop
def main():
    game = SecretCodeBreaker()
    print("Welcome to the Secret Code Breaker Game!")
    while True:
        choice = input("\nChoose an option:\n1. Play Game\n2. Show High Scores\n3. Exit\n> ").strip()
        if choice == '1':
            game.play_game()
        elif choice == '2':
            high_scores = game.read_high_scores()
            if not high_scores.empty:
                print("\nHigh Scores:")
                print(high_scores.sort_values(by="Remaining Guesses", ascending=False).to_string(index=False))
            else:
                print("No high scores available.")
        elif choice == '3':
            print("Thanks for playing! Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if _name_ =="_main_":
    main()
